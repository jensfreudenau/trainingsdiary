= javascript_include_tag 'OpenLayers', 'OpenStreetMap', 'highcharts'
:javascript
  //base layers
  var openstreetmap = new OpenLayers.Layer.OSM();
  var opencyclemap = new OpenLayers.Layer.OSM.CycleMap("CycleMap");
- for home in @home
  - heartrate = [home.heartrate]
  .block
    .secondary-navigation
      %ul.wat-cf
        %li.first= link_to "#{t("web-app-theme.list", :default => "List")}", "/"
    .content
      .inner
        .trainings_data
          %table.training
            %tr
              %th 
                = t("activerecord.attributes.home.distance_total", :default => t("activerecord.labels.distance_total", :default => "Distance"))
              %th
                = t("activerecord.attributes.home.time_total", :default => t("activerecord.labels.time_total", :default => "Duration"))
              %th
                &oslash; Pace
              %th
                = t("activerecord.attributes.home.sportname", :default => t("activerecord.labels.sportname", :default => "Kind of Sport"))
              %th
                = t("activerecord.attributes.home.coursename", :default => t("activerecord.labels.coursename", :default => "Course"))
              %th
                = t("activerecord.attributes.home.sportlevel", :default => t("activerecord.labels.sportlevel", :default => "Level"))  
              %th
                = t("activerecord.attributes.home.start_time", :default => t("activerecord.labels.start_time", :default => "Started at"))
            %tr
              %td
                = time2hms(to_dot_time(home.time_total.to_i))
              %td 
                = number_to_human(home.distance_total, :units => :distance, :precision => 4)  
              %td
                = minutesPerKm(home.distance_total, home.time_total.to_i)
              %td
                = home.sportname
              %td
                = home.coursename
              %td
                = home.sportlevel
              %td
                = localize(home.start_time, :format => :default)
        .trainings_data
          %h3
            = t('comment')
            %p
              = home.comment        
        #heartrate_chart
        
        .trainings_data
          #laps
            %h2
              - if @laps.length > 1
                = @laps.length.to_s + " " + t("laps")
              - else 
                = @laps.length.to_s + " " + t("lap")
            .outer_laps
              %table.laps
                %tr
                  %th
                    = t("numb", :default => "No")
                  %th
                    = t("activerecord.attributes.lap.distance", :default => t("activerecord.labels.distance", :default => "Lap Distance"))
                  %th
                    = t("activerecord.attributes.lap.duration", :default => t("activerecord.labels.duration", :default => "Duration"))
                  %th
                    &oslash; Pace 
                  %th
                    &oslash; 
                    = t("activerecord.attributes.lap.heartrate", :default => t("activerecord.labels.heartrate_avg", :default => "Heartrate"))
                  %th
                    max. 
                    = t("activerecord.attributes.lap.heartrate", :default => t("activerecord.labels.heartrate_max", :default => "max Heartrate"))  
                //- for lap in @laps 
                - @laps.each_with_index do |lap, index|   
                  %tr{:class => cycle("odd", "even")}
                    %td
                      = index.to_i + 1
                    %td
                      = number_to_human(lap.distance_total, :units => :distance, :precision => 4)
                    %td
                      = time2hms(to_dot_time(lap.duration.to_i))
                    %td
                      - if !lap.distance_total.nil? && !lap.distance_total == 0
                        = minutesPerKm(lap.distance_total,lap.duration.to_i)
                    %td
                      = lap.heartrate_avg
                    %td
                      = lap.heartrate_max.to_i

        #map
:javascript
  createMapWithRoute( #{home.map_data}, "map");


  var heartrates = #{home.heartrate};
  console.log(1234);
  var heartbeat = [];
  var value;  
  k = 0;
  $.each( heartrates, function( intIndex, objValue ){
     $.each( objValue, function( index, value ){
        if (value != null) {
          heartbeat[k] = value;
          k++;
        }
     });
  });
  var max = heartbeat[k-1][0];
  $(function() {
      new Highcharts.Chart({
        chart: {
          height: 250,
          renderTo: 'heartrate_chart',

          margin: [10, 20, 30, 60]	
        },
        title: {
          text: '',
          x: -50, //center$maxHeight
          y: 200
        },
        subtitle: {
          text: '',
          x: -20
        },
        credits: {
          enabled: false
        },
        legend: {
          enabled: false
        },
        xAxis: {
          labels: {
            formatter: function() {
                return secondsToTime(this.value);
            },
            style: {
                color: '#000000'
            }
          },
          type: "Time",
          lineWidth: 1,
          max: max 
        },

        yAxis: [{ // Primary yAxis
          labels: {
            formatter: function() {
                return this.value + ' bpm';
            },
            style: {
                color: '#AA4643'
            }
          },
          title: {
            text: '',
            margin: 80,
            style: {
                color: '#AA4643'
            }
          }
        }],
        plotOptions: {
          area: {
            fillOpacity: 0.3,
            lineWidth: 1,
            marker: {
              enabled: false,
              states: {
                hover: {
                  enabled: true,
                  radius: 3
                }
              }
            },
            shadow: true,
            states: {
              hover: {
                lineWidth: 1						
              }
            }
          }
        },
        tooltip: {
          formatter: function() {
            return secondsToTime(this.x) +' '+ this.y + ' bpm';
          }
        },
        series: [{
          type: 'area',
          data: heartbeat
        }]
      });
    });